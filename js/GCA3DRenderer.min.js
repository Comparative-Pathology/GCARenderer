GCA3DRenderer=function(wind,cont,pick){var self=this;this.type="GCA3DRenderer",this._config=void 0,Object.defineProperty(self,"version",{value:"1.0.0",writable:!1}),this._pickerFn=pick,this._curPath=0,this._curPathIdx=0,this._roiIdx=[0,0],this._ren=new MARenderer(wind,cont),this.nameSep="-",this.referenceNamePrefix="ref",this.anatomyNamePrefix="ana",this.discNamePrefix="disc",this.pathNamePrefix="path",this.landmarkNamePrefix="lm",this.landmarkNameLblPrefix="ll",this.markerNamePrefix="mm",this.markerNameLblPrefix="ml",this.init=function(cfg){this._isString(cfg)&&(cfg=self._loadJson(cfg)),this._isArray(cfg)&&(cfg=cfg[0]),self._setConfig(cfg),this._loadPaths(),this._ren.init(),Boolean(self._config.display_props.pick_precision)||(self._config.display_props.pick_precision=1),self._ren.raycaster.linePrecision=self._config.display_props.pick_precision,this._ren.win.addEventListener("click",this._ren._pick,!1),this._ren.addEventListener("pick",self._picker,!1)},this.getConfig=function(){return self._config},this.addModels=function(){if(Boolean(self._config.reference_surfaces)&&this._isArray(self._config.reference_surfaces)&&self._config.reference_surfaces.length>0)for(let i=0,l=self._config.reference_surfaces.length;i<l;++i){let ref=self._config.reference_surfaces[i],dsp=ref.display_props;this._ren.addModel({name:self.getReferenceName()+String(i),path:ref.filepath+"/"+ref.filename,color:dsp.color,opacity:dsp.opacity,transparent:!0})}if(Boolean(self._config.anatomy_surfaces)&&this._isArray(self._config.anatomy_surfaces)&&self._config.anatomy_surfaces.length>0)for(let i=0,l=self._config.anatomy_surfaces.length;i<l;++i){let anat=self._config.anatomy_surfaces[i],dsp=anat.display_props;this._ren.addModel({name:self.getAnatomyName(anat.id),path:anat.filepath+"/"+anat.filename,color:dsp.color,opacity:dsp.opacity,transparent:!0}),this._isDefined(anat.map_filename)&&(anat.mapping=this._loadJson(anat.filepath+"/"+anat.map_filename))}let dsc=self._config.disc,dsp=dsc.display_props;this._ren.addModel({name:self.getDiscName(dsc.id),mode:MARenderMode.SHAPE,style:MARenderShape.DISC,color:dsp.color,size:dsp.radius,extrude:dsp.thickness});for(let i=0,l=self._config.paths.length;i<l;++i){let pth=self._config.paths[i],dsp=pth.display_props;this._ren.addModel({name:self.getPathName(pth.id),mode:MARenderMode.PATH,color:dsp.color,linewidth:dsp.line_width,vertices:pth.points,tangents:pth.tangents})}let lof=self._config.display_props.label_offset;lof=new THREE.Vector3(lof[0],lof[1],lof[2]);for(let i=0;i<self._config.landmarks.length;++i){let lmk=self._config.landmarks[i];for(let j=0;j<lmk.paths.length;++j){let lpi=self._config.pathIdToIdx[lmk.paths[j]],pas=self._config.paths[lpi].points[lmk.position[j]],pos=new THREE.Vector3(pas[0],pas[1],pas[2]);self._ren.addModel({name:self.getLandmarkName(lmk.id),mode:MARenderMode.MARKER,position:pos}),self._ren.addModel({name:self.getLandmarkLblName(lmk.id),mode:MARenderMode.LABEL,text:lmk.anatomy[0].abbreviated_name,position:pos.add(lof)})}}},this.setView=function(){let dsp=self._config.display_props,v=dsp.model_views[dsp.viewTypeToIdx[dsp.default_view]],c=new THREE.Vector3(v.centre[0],v.centre[1],v.centre[2]),p=new THREE.Vector3(v.cam_pos[0],v.cam_pos[1],v.cam_pos[2]),u=new THREE.Vector3(v.up[0],v.up[1],v.up[2]);self._ren.setCamera(c,v.near,v.far,p),self._ren.setHome(p,u),self._ren.goHome()},this.addMarker=function(name,pos,col,txt){if(pos=new THREE.Vector3(pos[0],pos[1],pos[2]),self._ren.addModel({name:self.getMarkerName(name),mode:MARenderMode.MARKER,color:col,position:pos}),txt){let dp=self._config.display_props,lof=new THREE.Vector3(dp.label_offset[0],dp.label_offset[1],dp.label_offset[2]);self._ren.addModel({name:self.getMarkerLblName(name),mode:MARenderMode.LABEL,text:txt,position:pos.add(lof)})}},this.removeMarker=function(name){self._ren.removeModel(self.getMarkerName(name)),self._ren.removeModel(self.getMarkerLblName(name))},this.setPosition=function(pmk0,pmk1,pdt,smk0,smk1,sdt,emk0,emk1,edt){let p=self._indexOnPath(pmk0,pmk1,pdt),rs=self._indexOnPath(smk0,smk1,sdt),re=self._indexOnPath(emk0,emk1,edt);this._updatePosition(p[0],p[1],rs[1],re[1])},this.setDiscRadius=function(rad){let dsc=self._config.disc,dsp=dsc.display_props;dsp.radius=rad;let pd=self._config.paths[self._curPath],vtx=pd.points[self._curPathIdx],tan=pd.tangents[self._curPathIdx],ext=dsp.thickness;Boolean(ext)||(ext=1),self._ren.updateModel({name:self.getDiscName(dsc.id),size:rad,position:new THREE.Vector3(vtx[0],vtx[1],vtx[2]),normal:new THREE.Vector3(tan[0],tan[1],tan[2]),extrude:ext})},this.animate=function(){self._ren.animate()},this.getPosition=function(path,path_idx){let rtn=void 0,landmarks=self._config.landmarks,lmks=[void 0,void 0],pi=[-1,-1];for(let i=0;i<landmarks.length;++i){let pinp=-1,lmk=landmarks[i];for(let j=0;j<lmk.paths.length;++j)if(path===lmk.paths[j]){pinp=j;break}pinp>=0&&(lmk.position[pinp]<=path_idx&&(void 0===lmks[0]||i>lmks[0])&&(pi[0]=pinp,lmks[0]=i),lmk.position[pinp]>=path_idx&&(void 0===lmks[1]||i<lmks[1])&&(pi[1]=pinp,lmks[1]=i))}if(void 0!==lmks[0]&&void 0!==lmks[1]){let p0=landmarks[lmks[0]].position[pi[0]],p1=landmarks[lmks[1]].position[pi[1]];rtn=[lmks[0],lmks[1],(path_idx-p0)/(p1-p0)]}return rtn},this.getSectionImage=function(){let img=void 0;if(Boolean(self._config.section_files)&&self._config.section_files.length>self._curPath){let sf=self._config.section_files[self._curPath],template=sf.filename,rx=/%([0 ]?)(\d*)d/,fmt=template.match(rx),n=parseInt(fmt[2])||0,d=String(self._curPathIdx);n>d.length&&(d=fmt[1].repeat(n-d.length)+d),img=sf.filepath+"/"+template.replace(rx,d)}return img},this.positionToPath=function(pos,tol){let fnd=[0,0,Number.MAX_VALUE],pv=new THREE.Vector3(pos[0],pos[1],pos[2]);for(let pi=0;pi<self._config.paths.length;++pi){let path=self._config.paths[pi];for(let pj=0;pj<path.n;++pj){let pp=path.points[pj],d2=pv.distanceToSquared(new THREE.Vector3(pp[0],pp[1],pp[2]));d2<fnd[2]&&(fnd[0]=pi,fnd[1]=pj,fnd[2]=d2)}}return fnd[2]<tol?fnd[2]=Math.sqrt(fnd[2]):fnd=void 0,fnd},this.getAnatomyConfig=function(id){let an=void 0,all_an=self._config.anatomy_surfaces;for(let i=0;i<all_an.length;++i)if(all_an[i].id===id){an=all_an[i];break}return an},this.getReferenceName=function(){return self.referenceNamePrefix+self.nameSep+gcaRen._config.reference_surfaces.id},this.getAnatomyName=function(id){return self.anatomyNamePrefix+self.nameSep+id},this.getDiscName=function(id){return self.discNamePrefix+self.nameSep+id},this.getPathName=function(id){let pix=self._config.pathIdToIdx[id];return self.pathNamePrefix+self.nameSep+pix},this.getLandmarkName=function(id){return self.landmarkNamePrefix+self.nameSep+id},this.getLandmarkLblName=function(id){return self.landmarkNameLblPrefix+self.nameSep+id},this.getMarkerName=function(id){return self.markerNamePrefix+self.nameSep+id},this.getMarkerLblName=function(id){return self.markerNameLblPrefix+self.nameSep+id},this.findDispObj=function(gca_grp,gca_id){return this._findDispObjs(gca_grp,gca_id,!1)},this.findAllDispObj=function(gca_grp,gca_id){return this._findDispObjs(gca_grp,gca_id,!0)},this._isDefined=function(x){return void 0!==x},this._isArray=function(obj){return"[object Array]"===Object.prototype.toString.call(obj)},this._isString=function(obj){return"[object String]"===Object.prototype.toString.call(obj)},this._clamp=function(v,mn,mx){return v<mn?mn:v>mx?mx:v},this._baryCoords=function(t,p){let b=void 0,t0=t[0],v0=new THREE.Vector3(t[1].x-t0.x,t[1].y-t0.y,t[1].z-t0.z),v1=new THREE.Vector3(t[2].x-t0.x,t[2].y-t0.y,t[2].z-t0.z),v2=new THREE.Vector3(p.x-t0.x,p.y-t0.y,p.z-t0.z),d00=v0.dot(v0),d01=v0.dot(v1),d11=v1.dot(v1),d20=v2.dot(v0),d21=v2.dot(v1),d=d00*d11-d01*d01;return d>0&&(d=1/d,(b=new Array(3))[1]=d*(d11*d20-d01*d21),b[2]=d*(d00*d21-d01*d20),b[0]=1-b[1]-b[2]),b},this._loadJson=function(url){let obj=void 0,req=new XMLHttpRequest;return req.open("GET",url,!1),req.send(null),200===req.status&&(obj=JSON.parse(req.responseText)),obj},this._setConfig=function(cfg){self._config=cfg,this._sortCfgLandmarks(cfg),this._findCfgPaths(),this._findCfgModelObjects(),this._findCfgViews(),this._ren.markerSizeSet(self._config.display_props.marker_size)},this._loadPaths=function(){for(let i=0,l=self._config.paths.length;i<l;++i){let path=self._config.paths[i],path_data=this._loadJson(path.filepath+"/"+path.spline_filename);path.n=path_data.n,path.points=path_data.points,path.tangents=path_data.tangents}},this._sortCfgLandmarks=function(cfg){cfg.landmarks.sort((a,b)=>{return a.position[0]-b.position[0]})},this._findCfgModelObjects=function(){let cfg=self._config;for(const i in cfg.model_objects){let mo=cfg.model_objects[i];if(this._isDefined(mo)&&this._isDefined(mo.group))switch(mo.group){case"GLOBAL_DISPLAY_PROP":cfg.display_props=mo.display_props;break;case"DISC":cfg.disc=mo;break;case"SECTION_FILES":this._isDefined(cfg.section_files)||(cfg.section_files=[]);let pi=cfg.pathIdToIdx[mo.path];cfg.section_files[pi]=mo;break;case"REFERENCE_SURFACES":this._isDefined(cfg.reference_surfaces)||(cfg.reference_surfaces=[]),cfg.reference_surfaces.push(mo);break;case"ANATOMY_SURFACES":this._isDefined(cfg.anatomy_surfaces)||(cfg.anatomy_surfaces=[]),cfg.anatomy_surfaces.push(mo)}}},this._findCfgPaths=function(){self._config.pathIdToIdx=[];for(let i=0;i<self._config.paths.length;++i){let p=self._config.paths[i];self._config.pathIdToIdx[p.id]=i}},this._findCfgViews=function(){let gdp=self._config.display_props;gdp.viewTypeToIdx=[];for(const i in gdp.model_views){let v=gdp.model_views[i];gdp.viewTypeToIdx[v.type]=i}},this._indexOnPath=function(lmid0,lmid1,dst){let path=void 0,path_idx=void 0,index=void 0,mi=[-1,-1],mpi=[-1,-1],mp=[[],[]],li=0,ll=self._config.landmarks.length;for(;(mi[0]<0||mi[1]<0)&&li<ll;){let lmk=self._config.landmarks[li];lmk.id===lmid0&&(mi[0]=li,mp[0]=lmk.paths),lmk.id==lmid1&&(mi[1]=li,mp[1]=lmk.paths),++li}if(mi[0]>-1&&mi[1]>-1){li=0,ll=mp[0].length;let jl=mp[1].length;for(;void 0===path_idx&&li<ll;){for(let ji=0;ji<jl;++ji)mp[0][li]===mp[1][ji]&&(mpi[0]=li,mpi[1]=ji,path=mp[0][li],path_idx=self._config.pathIdToIdx[path]);++li}if(void 0!==path_idx){let i0=self._config.landmarks[mi[0]].position[mpi[0]],i1=self._config.landmarks[mi[1]].position[mpi[1]];index=i0+Math.floor((i1-i0)*dst),index=this._clamp(index,0,self._config.paths[path_idx].n-1)}}return[path_idx,index]},this._updateColon=function(){let scene=self._ren.scene;for(let i=0,l=scene.children.length;i<l;++i){let child=scene.children[i];if("anatomy"===child.name.substring(0,7)){let s=child.name.split("_");if(s.length>1){let idx=parseInt(s[1]);if(idx>=0&&idx<self._config.anatomy_surfaces.length){let anat=self._config.anatomy_surfaces[idx];self._ren.updateModel({name:child.name,color:anat.color,opacity:anat.opacity})}}}}},this._updatePosition=function(path,pathIdx,roiIdxSrt,roiIdxEnd){self._curPath=path,self._curPathIdx=pathIdx,self._roiIdx=[roiIdxSrt,roiIdxEnd];let pd=self._config.paths[self._curPath],dsc=self._config.disc,dsp=dsc.display_props,name=self.getDiscName(dsc.id),vtx=pd.points[self._curPathIdx],tan=pd.tangents[self._curPathIdx],ext=dsp.thickness;Boolean(ext)||(ext=1),self._ren.updateModel({name:name,size:dsp.radius,position:new THREE.Vector3(vtx[0],vtx[1],vtx[2]),normal:new THREE.Vector3(tan[0],tan[1],tan[2]),extrude:ext}),name="highlight";let vertices=pd.points.slice(self._roiIdx[0],self._roiIdx[1]),tangents=pd.tangents.slice(self._roiIdx[0],self._roiIdx[1]);self._ren.getObjectByName(name)?self._ren.updateModel({name:name,vertices:vertices,tangents:tangents}):self._ren.addModel({name:name,mode:MARenderMode.PATH,color:self._config.display_props.path_highlight_color,linewidth:self._config.display_props.path_highlight_width,vertices:vertices,tangents:tangents})},this._findDispObjs=function(gca_grp,gca_id,all){let objs=[],scene=self._ren.scene;for(let i=0,l=scene.children.length;i<l;++i){let grp=void 0,id=void 0,obj=scene.children[i],tynm=obj.name.split(self.nameSep);if(tynm.length>1)switch(tynm[0]){case this.referenceNamePrefix:grp="REFERENCE_SURFACES",id=tynm[1];break;case this.anatomyNamePrefix:grp="ANATOMY_SURFACES",id=tynm[1];break;case this.discNamePrefix:grp="DISC",id=tynm[1];break;case this.pathNamePrefix:grp="PATHS",id=tynm[1];break;case this.landmarkNamePrefix:case this.landmarkNameLblPrefix:grp="LANDMARKS",id=tynm[1];break;case this.markerNamePrefix:case this.markerNameLblPrefix:grp="MARKERS",id=tynm[1]}if((!this._isDefined(gca_grp)||this._isDefined(grp)&&gca_grp==grp)&&(!this._isDefined(gca_id)||this._isDefined(id)&&gca_id==id)){if(!all){objs=[grp,obj];break}objs.push([grp,obj])}}return objs},this._picker=function(ev){if(ev&&ev.type&&"pick"===ev.type&&self._picker){let idx={pth:-1,mkm:-1,ana:-1},cnt=[],objA=[],typA=[],namA=[],posA=[],triA=[];for(let i=0,l=ev.hitlist.length;i<l;++i){let hit=ev.hitlist[i];obj=hit.object,obj&&obj.name&&(tynm=obj.name.split(self.nameSep),tynm.length>1&&(tynm.length>2&&(tynm=[tynm[0],tynm.slice(1).join(self.nameSep)]),tynm[0]===self.pathNamePrefix?idx.pth<0?(idx.pth=objA.length,cnt.push(1),objA.push(obj),typA.push(tynm[0]),namA.push(tynm[1]),posA.push(hit.point),triA.push(0)):tynm[1]===namA[idx.pth]&&(++cnt[idx.pth],posA[idx.pth].add(hit.point)):tynm[0]===self.landmarkNamePrefix||tynm[0]===self.markerNamePrefix?idx.mkm<0?(idx.mkm=objA.length,cnt.push(1),objA.push(obj),typA.push(tynm[0]),namA.push(tynm[1]),posA.push(hit.point),triA.push(0)):tynm[0]===typA[idx.pth]&&tynm[1]===namA[idx.pth]&&(++cnt[idx.pth],posA[idx.pth].add(hit.point)):tynm[0]===self.anatomyNamePrefix&&idx.ana<0&&(idx.ana=objA.length,cnt.push(1),objA.push(obj),typA.push(tynm[0]),namA.push(tynm[1]),posA.push(hit.point),triA.push(hit.faceIndex))))}if(objA.length>0){for(let i=0;i<objA.length;++i)if(typA[i]===self.anatomyNamePrefix){let g=objA[i].geometry,an=self.getAnatomyConfig(namA[i]);if(self._isDefined(an)&&self._isDefined(an.mapping)&&self._isDefined(g.index)&&self._isDefined(g.attributes.position)){let t=3*triA[i],ti=[g.index.array[t],g.index.array[t+1],g.index.array[t+2]],p=g.attributes.position.array,tv=new Array(3),mp=new Array(3);for(j=0;j<3;++j)v=3*ti[j],mp[j]=an.mapping[ti[i]],tv[j]=new THREE.Vector3(p[v],p[v+1],p[v+2]);tw=self._baryCoords(tv,posA[i]),pi=Math.floor(mp[0]*tw[0]+mp[1]*tw[1]+mp[2]*tw[2]);let path=self._config.paths[self._curPath];pi=self._clamp(pi,0,path.n-1),posA[i]=path.points[pi]}else objA[i]=void 0}else{let p=posA[i].divideScalar(cnt[i]);posA[i]=[p.x,p.y,p.z]}for(let i=objA.length-1;i>=0;--i)self._isDefined(objA[i])||(objA.splice(i,1),typA.splice(i,1),namA.splice(i,1),posA.splice(i,1))}objA.length>0&&self._pickerFn(ev,objA,typA,namA,posA)}}};
